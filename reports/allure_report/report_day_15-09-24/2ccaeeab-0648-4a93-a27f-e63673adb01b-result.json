{"name": "test_first_route[browser_page1-problem_user]", "status": "failed", "statusDetails": {"message": "AssertionError: actual_value ='my_last_name' != test_info[index] ='my_first_name'", "trace": "self = <test_cases.TestPages object at 0x1103e3d90>, test_page = <pages.base_page.BasePage object at 0x110c21e50>, user = 'problem_user'\n\n    @pytest.mark.parametrize('user', [STANDARD_USER, PROBLEM_USER])\n    @allure.story('Тест по маршруту: user - выбор товара - корзина - \"оплата\".')\n    async def test_first_route(self, test_page: BasePage, user):\n        await test_page.visit(BASE_URL, waiting_flag=True)\n    \n        await test_page.log_in_system(user)\n    \n        with allure.step(f'Ожидаем загрузки товаров с максимальной задержкой в 3 секунды'):\n            try:\n                await test_page.page.wait_for_selector('div.inventory_list', timeout=3_000)\n            except TimeoutError:\n                raise Exception('Страница была загружена некорректно!')\n    \n        count_items_in_cart_before_adding = await test_page.get_count_goods_in_cart()\n    \n        with allure.step(f'Получим все товары со страницы с товарами'):\n            items = await test_page.page.locator('div.inventory_list > div.inventory_item:visible').all()\n    \n        random_item = choice(items)\n        title_item = (await random_item.locator('div.inventory_item_name').text_content()).strip()\n        with (allure.step(f'Random товар \"{title_item}\" добавляем в корзину')):\n            await random_item.locator('button.btn_inventory').click()\n    \n        count_items_in_cart_after_adding = await test_page.get_count_goods_in_cart()\n        with allure.step(f\"\"\"Проверяем, что количество товаров в корзине изменилось.\n                Было: '{count_items_in_cart_before_adding}'. Стало: '{count_items_in_cart_after_adding}'\"\"\"):\n            assert count_items_in_cart_before_adding < count_items_in_cart_after_adding, 'Error!'\n    \n        with allure.step(f'Переходим в корзину с товарами.'):\n            await test_page.page.locator('div#shopping_cart_container').click()\n    \n        with allure.step(f'Ожидаем перехода на страницу и появления списка товаров'):\n            await test_page.page.wait_for_selector('div#cart_contents_container > div > div.cart_list', timeout=3_000)\n    \n        with allure.step(f'Проверяем количество товаров в списке. Их должно быть 1'):\n            all_items = await test_page.page.locator('div.cart_item').all()\n            assert len(all_items) == 1, 'Количество товаров в списке не соответствует ожидаемому!'\n    \n        with allure.step(f'Проверяем соответствует ли товар тому, что был добавлен в корзину'):\n            current_item = await all_items[0].locator('div.inventory_item_name').text_content()\n            assert current_item.strip() == title_item, 'Товар в корзине НЕ соответствует тому, что было добавлено'\n    \n        await Button(test_page.page, 'button#checkout', 'Checkout').click()\n    \n        with allure.step(f'Ожидаем перехода на страницу с информацией для отправки заказа'):\n            await test_page.page.wait_for_selector('form > div.checkout_info', timeout=3_000)\n    \n>       await test_page.fill_and_check_post_info()\n\ntests/test_cases.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.base_page.BasePage object at 0x110c21e50>\n\n    async def fill_and_check_post_info(self):\n        test_info = ['my_first_name', 'my_last_name', '123456']\n        tags = ['first-name', 'last-name', 'postal-code']\n    \n        with allure.step(f'Заполняем форму'):\n            for index, tag_id in enumerate(tags):\n                await Input(self.page, f'input#{tag_id}', tag_id).fill(test_info[index])\n    \n        with allure.step(f'Проверим, что форма была заполнена корректно'):\n            for index, tag_id in enumerate(tags):\n                actual_value = await self.page.locator(f'input#{tag_id}').input_value()\n>               assert actual_value == test_info[index], f'{actual_value =} != {test_info[index] =}'\nE               AssertionError: actual_value ='my_last_name' != test_info[index] ='my_first_name'\n\npages/base_page.py:104: AssertionError"}, "steps": [{"name": "Открываем страницу по ссылке: \"https://www.saucedemo.com/\" c ожиданием полной загрузки", "status": "passed", "start": 1726385290288, "stop": 1726385295322}, {"name": "Задержка перед следующим шагом 1708", "status": "passed", "start": 1726385295322, "stop": 1726385297040}, {"name": "Пытаемся залогиниться в системе", "status": "passed", "steps": [{"name": "Заполнить input \"Поле ввода \"username\"\" значением \"problem_user\"", "status": "passed", "start": 1726385297040, "stop": 1726385297094}, {"name": "Заполнить input \"Поле ввода \"password\"\" значением \"secret_sauce\"", "status": "passed", "start": 1726385297094, "stop": 1726385297155}, {"name": "Кликнуть на \"button\" с именем \"Кнопка \"Login\"\"", "status": "passed", "start": 1726385297155, "stop": 1726385297207}], "start": 1726385297040, "stop": 1726385297207}, {"name": "Ожидаем загрузки товаров с максимальной задержкой в 3 секунды", "status": "passed", "start": 1726385297207, "stop": 1726385297231}, {"name": "Получим все товары со страницы с товарами", "status": "passed", "start": 1726385297239, "stop": 1726385297247}, {"name": "Random товар \"Sauce Labs Bike Light\" добавляем в корзину", "status": "passed", "start": 1726385297255, "stop": 1726385297292}, {"name": "Проверяем, что количество товаров в корзине изменилось.\n                Было: '0'. Стало: '1'", "status": "passed", "start": 1726385297299, "stop": 1726385297299}, {"name": "Переходим в корзину с товарами.", "status": "passed", "start": 1726385297299, "stop": 1726385297335}, {"name": "Ожидаем перехода на страницу и появления списка товаров", "status": "passed", "start": 1726385297335, "stop": 1726385297343}, {"name": "Проверяем количество товаров в списке. Их должно быть 1", "status": "passed", "start": 1726385297343, "stop": 1726385297347}, {"name": "Проверяем соответствует ли товар тому, что был добавлен в корзину", "status": "passed", "start": 1726385297347, "stop": 1726385297354}, {"name": "Кликнуть на \"button\" с именем \"Checkout\"", "status": "passed", "start": 1726385297354, "stop": 1726385297385}, {"name": "Ожидаем перехода на страницу с информацией для отправки заказа", "status": "passed", "start": 1726385297385, "stop": 1726385297394}, {"name": "Заполняем форму", "status": "passed", "steps": [{"name": "Заполнить input \"first-name\" значением \"my_first_name\"", "status": "passed", "start": 1726385297394, "stop": 1726385297407}, {"name": "Заполнить input \"last-name\" значением \"my_last_name\"", "status": "passed", "start": 1726385297407, "stop": 1726385297419}, {"name": "Заполнить input \"postal-code\" значением \"123456\"", "status": "passed", "start": 1726385297419, "stop": 1726385297435}], "start": 1726385297394, "stop": 1726385297435}, {"name": "Проверим, что форма была заполнена корректно", "status": "failed", "statusDetails": {"message": "AssertionError: actual_value ='my_last_name' != test_info[index] ='my_first_name'\n", "trace": "  File \"/Users/sergejbostan/Desktop/testsProjects/qa_test_effective_mobile/pages/base_page.py\", line 104, in fill_and_check_post_info\n    assert actual_value == test_info[index], f'{actual_value =} != {test_info[index] =}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1726385297435, "stop": 1726385297444}], "parameters": [{"name": "browser_page", "value": "('firefox', None)"}, {"name": "user", "value": "'problem_user'"}], "start": 1726385290288, "stop": 1726385297444, "uuid": "028f839c-4c5a-48d9-b619-ee817a742d41", "historyId": "3d9c03aee2b7926ccd94f1bf30d052b5", "testCaseId": "dd44d1175c6f224f8c88edbe1e4b9c2a", "fullName": "tests.test_cases.TestPages#test_first_route", "labels": [{"name": "feature", "value": "Тесты на ТЗ по вакансии QA auto Python"}, {"name": "story", "value": "Тест по маршруту: user - выбор товара - корзина - \"оплата\"."}, {"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_cases"}, {"name": "subSuite", "value": "TestPages"}, {"name": "host", "value": "MacBook-Pro-Sergej.local"}, {"name": "thread", "value": "48689-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cases"}]}